#BlueJ class context
comment0.target=EventController
comment0.text=\r\n\ EventController\ is\ the\ control\ class\ for\ the\ system.\r\n\ It\ is\ responsible\ for\ interacting\ with\ all\ the\ entity\ classes\ to\ retrieve\ and\ manipulate\ data.\r\n\ It\ communicates\ with\ the\ PrimeEvent\ class\ by\ passing\ the\ data\ to\ be\ displayed.\r\n\ @author\ Rohan\ Nischal,Guanting\ Chen,Swathi\ Jadhav\r\n\ @version\ 19-10-2019\r\n
comment1.params=
comment1.target=EventController()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ EventController\r\n
comment10.params=id
comment10.target=java.lang.String\ getUserById(int)
comment10.text=\r\n\ Method\ getUserById\r\n\ This\ method\ is\ used\ to\ get\ a\ user\ by\ id\r\n\ @param\ id\ A\ user\ id\r\n\ @return\ The\ formatted\ user's\ details\r\n
comment11.params=id
comment11.target=Owner\ getOwnerById(int)
comment11.text=\r\n\ Method\ getOwnerById\r\n\ This\ method\ is\ used\ to\ get\ a\ owner\ by\ id\r\n\ @param\ id\ A\ user\ id\r\n\ @return\ The\ owner\ corresponding\ to\ the\ id,\ if\ any\r\n
comment12.params=id
comment12.target=Customer\ getCustomerById(int)
comment12.text=\r\n\ Method\ getCustomerById\r\n\ This\ method\ is\ used\ to\ get\ a\ customer\ by\ id\r\n\ @param\ id\ A\ user\ id\r\n\ @return\ The\ customer\ corresponding\ to\ the\ id,\ if\ any\r\n
comment13.params=userID
comment13.target=java.lang.String\ getUserRole(int)
comment13.text=\r\n\ Method\ getUserRole\r\n\ This\ method\ is\ used\ to\ get\ a\ particular\ user's\ role\r\n\ @param\ userID\ A\ user\ id\r\n\ @return\ The\ role\ corresponding\ to\ the\ id,\ if\ any\r\n
comment14.params=id
comment14.target=Hall\ getHallById(int)
comment14.text=\r\n\ Method\ getHallById\r\n\ This\ method\ is\ used\ to\ get\ a\ hall\ by\ id\r\n\ @param\ id\ A\ hall\ id\r\n\ @return\ The\ hall\ corresponding\ to\ the\ id,\ if\ any\r\n
comment15.params=
comment15.target=int\ getMaxUserId()
comment15.text=\r\n\ Method\ getMaxUserId\r\n\ The\ method\ is\ used\ to\ get\ the\ maximum\ user\ id\ that\ has\ been\ used\ so\ far\r\n\ @return\ The\ max\ user\ id\ used\r\n
comment16.params=u1\ u2
comment16.target=int\ compare(User,\ User)
comment17.params=
comment17.target=int\ getMaxQuotationId()
comment17.text=\r\n\ Method\ getMaxQuotationId\r\n\ The\ method\ is\ used\ to\ get\ the\ maximum\ quotation\ id\ that\ has\ been\ used\ so\ far\r\n\ @return\ The\ maximum\ quotation\ id\r\n
comment18.params=
comment18.target=void\ sortUserByLoginStatus()
comment18.text=\r\n\ Method\ sortUserByLoginStatus\r\n\ The\ method\ sorts\ the\ user\ list\ by\ isLoggedIn\ (from\ true\ to\ false)\r\n
comment19.params=u1\ u2
comment19.target=int\ compare(User,\ User)
comment2.params=
comment2.target=java.util.ArrayList\ getHalls()
comment2.text=\r\n\ Method\ getHalls\r\n\ accessor\ method\ for\ the\ arraylist\ of\ halls\r\n\ @return\ The\ list\ of\ halls\r\n
comment20.params=newFirstName\ newLastName\ newPhoneNo\ newEmail\ newPassword\ newRole
comment20.target=void\ addUser(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment20.text=\r\n\ Method\ addUser\r\n\ This\ method\ is\ used\ to\ add\ a\ user\ to\ the\ user's\ list\r\n\ @param\ newFirstName\ A\ first\ name\r\n\ @param\ newLastName\ A\ last\ name\r\n\ @param\ newPhoneNo\ A\ phone\ no\r\n\ @param\ newEmail\ An\ email\r\n\ @param\ newPassword\ A\ password\r\n\ @param\ newRole\ A\ role\r\n
comment21.params=userId
comment21.target=void\ fetchBookingAndPaymentData(int)
comment21.text=\r\n\ Method\ fetchBookingAndPaymentData\r\n\ This\ method\ is\ used\ to\ retrieve\ booking\ and\ payment\ data\ according\ to\ the\ user's\ id\ from\ the\ file\ and\ add\ them\ to\ the\ list\r\n\ @param\ userId\ A\ user's\ id\r\n
comment22.params=userID\ quotationID\ acceptedQuotations
comment22.target=Quotation\ getOwnerHallQuotation(int,\ int,\ java.util.ArrayList)
comment22.text=\r\n\ Method\ getOwnerHallQuotation\r\n\ This\ methods\ checks\ if\ a\ quotation\ id\ for\ the\ owner's\ hall\ is\ present\ in\ the\ list\ of\ accepted\ quotations\ and\ returns\ it\r\n\ @param\ userID\ A\ user's\ id\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @param\ acceptedQuotations\ A\ list\ of\ all\ accepted\ quotations\r\n\ @return\ The\ matched\ quotation,\ if\ any\r\n
comment23.params=
comment23.target=void\ fetchQuotationData()
comment23.text=\r\n\ Method\ fetchQuotationData\r\n\ This\ method\ is\ used\ to\ retrieve\ quotation\ data\ from\ the\ file\ and\ add\ them\ to\ the\ corresponding\ hall\r\n
comment24.params=
comment24.target=void\ fetchHallsData()
comment24.text=\r\n\ Method\ fetchHallsData\r\n\ This\ method\ is\ used\ to\ retrieve\ hall\ data\ from\ the\ file\ and\ add\ them\ to\ the\ halls\ list\r\n
comment25.params=
comment25.target=void\ fetchReviewData()
comment25.text=\r\n\ Method\ fetchReviewData\r\n\ This\ method\ is\ used\ to\ retrieve\ review\ data\ from\ the\ file\ and\ add\ them\ to\ the\ corresponding\ hall\r\n
comment26.params=
comment26.target=void\ fetchUsersData()
comment26.text=\r\n\ Method\ fetchUsersData\r\n\ This\ method\ is\ used\ to\ retrieve\ user\ data\ from\ the\ file\ and\ add\ them\ to\ the\ list\ of\ users\r\n
comment27.params=path\ booking
comment27.target=void\ writeToBookingsAndPaymentsFile(java.lang.String,\ Booking)
comment27.text=\r\n\ Method\ writeToBookingsAndPaymentsFile\r\n\ This\ methods\ write\ a\ booking's\ detail\ to\ the\ file\r\n\ @param\ path\ A\ file's\ location\r\n\ @param\ booking\ A\ booking\ object\r\n
comment28.params=path\ toAppend\ onlyUpdatedOnes\ quotations
comment28.target=void\ writeToQuotationsFile(java.lang.String,\ boolean,\ boolean,\ java.util.ArrayList)
comment28.text=\r\n\ Method\ writeToQuotationsFile\r\n\ This\ method\ writes\ the\ quotations'\ details\ to\ the\ file\r\n\ @param\ path\ A\ file\ path\r\n\ @param\ toAppend\ true\ if\ the\ details\ are\ to\ be\ append,\ false\ if\ to\ be\ replaced\r\n\ @param\ onlyUpdatedOnes\ true\ if\ only\ the\ last\ index\ of\ the\ quotation\ list\ is\ to\ be\ added,\ false\ if\ all\ are\ to\ be\ added\r\n\ @param\ quotations\ A\ list\ of\ quotations\ to\ write\r\n
comment29.params=path\ toAppend\ onlyUpdatedOnes
comment29.target=void\ writeToUsersFile(java.lang.String,\ boolean,\ boolean)
comment29.text=\r\n\ Method\ writeToUsersFile\r\n\ This\ method\ writes\ the\ users'\ details\ to\ the\ file\r\n\ @param\ path\ A\ file\ path\r\n\ @param\ toAppend\ true\ if\ the\ details\ are\ to\ be\ append,\ false\ if\ to\ be\ replaced\r\n\ @param\ onlyUpdatedOnes\ true\ if\ only\ the\ last\ index\ of\ the\ user\ list\ is\ to\ be\ added,\ false\ if\ all\ are\ to\ be\ added\r\n
comment3.params=
comment3.target=java.util.ArrayList\ getUsers()
comment3.text=\r\n\ Method\ getUsers\r\n\ accessor\ method\ for\ the\ arraylist\ of\ users\r\n\ @return\ The\ list\ of\ users\r\n
comment30.params=fileName
comment30.target=java.lang.String\ readFile(java.lang.String)
comment30.text=\r\n\ Method\ readFile\r\n\ This\ method\ reads\ all\ the\ contents\ from\ a\ file\ and\ returns\ it\ in\ string\ format\r\n\ @return\ All\ the\ file's\ contents.\ Each\ Line\ end\ replaced\ by\ \\n\ character.\r\n
comment31.params=fileName\ contents\ toAppend
comment31.target=void\ writeFile(java.lang.String,\ java.lang.String,\ boolean)
comment31.text=\r\n\ Method\ writeFile\r\n\ This\ method\ writes\ all\ the\ contents\ to\ the\ file\r\n\ @param\ fileName\ A\ file\ name\r\n\ @param\ contents\ The\ contents\ to\ write\ into\ the\ file.\ Each\ line\ end\ must\ be\ represented\ by\ \\n\ character.\r\n\ @param\ toAppend\ true\ if\ contents\ are\ to\ be\ appended,\ false\ if\ not\r\n
comment32.params=email\ password
comment32.target=boolean\ isValidCredentials(java.lang.String,\ java.lang.String)
comment32.text=\r\n\ Method\ isValidCredentials\r\n\ This\ method\ checks\ if\ the\ credentials\ correspond\ to\ a\ user\ or\ not.\r\n\ It\ also\ maintains\ the\ locked\ out\ status\ functionality.\ It\ locks\ out\ the\ user\ if\ 3\ consecutive\ incorrect\ login\ attempts\ are\ done\r\n\ @param\ email\ An\ email\ id\r\n\ @param\ password\ A\ user's\ password\r\n\ @return\ true\ if\ credentials\ are\ valid,\ false\ if\ not\r\n
comment33.params=
comment33.target=void\ initializeData()
comment33.text=\r\n\ Method\ initializeData\r\n\ This\ method\ is\ used\ to\ initialize\ all\ data\ related\ to\ the\ system\ on\ the\ home\ screen\r\n
comment34.params=
comment34.target=void\ doLogout()
comment34.text=\r\n\ Method\ doLogout\r\n\ This\ method\ performs\ the\ logout\ operation\r\n
comment35.params=searchSuburb\ searchEventType
comment35.target=java.lang.String\ getHallData(java.lang.String,\ java.lang.String)
comment35.text=\r\n\ Method\ getHallData\r\n\ The\ method\ returns\ the\ formatted\ details\ of\ the\ filtered\ halls\r\n\ @param\ searchSuburb\ A\ suburb\ name\r\n\ @param\ searchEventType\ An\ event\ type\r\n\ @return\ The\ formatted\ details\ of\ the\ filtered\ halls\r\n
comment36.params=searchSuburb\ searchEventType
comment36.target=java.util.ArrayList\ filterHalls(java.lang.String,\ java.lang.String)
comment36.text=\r\n\ Method\ filterHalls\r\n\ This\ method\ filters\ the\ list\ of\ halls\ according\ to\ the\ search\ criteria\r\n\ @param\ searchSuburb\ A\ suburb\ name\r\n\ @param\ searchEventType\ An\ event\ type\r\n\ @return\ The\ list\ of\ filtered\ halls\r\n
comment37.params=id
comment37.target=boolean\ doesHallExist(int)
comment37.text=\r\n\ Method\ doesHallExist\r\n\ This\ method\ checks\ if\ the\ hall\ corresponding\ to\ the\ id\ exists\ or\ not\r\n\ @param\ id\ A\ hall\ id\r\n\ @return\ true\ if\ hall\ exists,\ else\ false\r\n
comment38.params=id
comment38.target=java.lang.String\ getHallDetails(int)
comment38.text=\r\n\ Method\ getHallDetails\r\n\ This\ method\ reurns\ the\ formatted\ details\ of\ a\ particular\ hall\r\n\ @param\ id\ A\ hall\ id\r\n\ @return\ The\ formatted\ hall\ details\r\n
comment39.params=hallID\ startEventDate\ endEventDate\ noOfAttendees\ eventType\ requiresCatering\ specialReq\ finalPrice
comment39.target=void\ requestQuotation(int,\ java.util.Date,\ java.util.Date,\ int,\ java.lang.String,\ char,\ java.lang.String,\ double)
comment39.text=\r\n\ Method\ requestQuotation\r\n\ This\ method\ adds\ a\ quotation\ to\ the\ list\ of\ quotations\ and\ writes\ it\ to\ the\ file\r\n\ @param\ hallID\ A\ hall\ id\r\n\ @param\ startEventDate\ the\ start\ date\ time\ of\ the\ event\r\n\ @param\ endEventDate\ the\ ending\ date\ time\ of\ the\ event\r\n\ @param\ noOfAttendees\ A\ total\ number\ of\ attendees\r\n\ @param\ eventType\ A\ event\ type\r\n\ @param\ requiresCatering\ true\ if\ catering\ is\ required\r\n\ @param\ specialReq\ The\ special\ requirements\r\n\ @param\ finalPrice\ The\ final\ price\ of\ quotation\r\n
comment4.params=
comment4.target=java.util.ArrayList\ getPayments()
comment4.text=\r\n\ Method\ getPayments\r\n\ accessor\ method\ for\ the\ arraylist\ of\ payments\r\n\ @return\ The\ list\ of\ payments\r\n
comment40.params=d1\ d2
comment40.target=int\ daysBetween(java.util.Date,\ java.util.Date)
comment40.text=\r\n\ Method\ daysBetween\r\n\ This\ method\ is\ used\ to\ calculate\ the\ number\ of\ days\ between\ 2\ dates\r\n\ @param\ d1\ A\ first\ date\r\n\ @param\ d2\ A\ second\ date\r\n\ @return\ The\ number\ of\ days\ between\ them\r\n
comment41.params=startEventDate\ endEventDate\ noOfAttendees\ eventType\ requiresCatering\ specialReq\ hallID
comment41.target=double\ calculatePrice(java.util.Date,\ java.util.Date,\ int,\ java.lang.String,\ char,\ java.lang.String,\ int)
comment41.text=\r\n\ Method\ calculatePrice\r\n\ This\ method\ is\ used\ to\ calculate\ the\ final\ price\ for\ the\ quotation\ based\ on\ the\ details\r\n\ @param\ startEventDate\ the\ start\ date\ time\ of\ the\ event\r\n\ @param\ endEventDate\ the\ ending\ date\ time\ of\ the\ event\r\n\ @param\ noOfAttendees\ A\ total\ number\ of\ attendees\r\n\ @param\ eventType\ A\ event\ type\r\n\ @param\ requiresCatering\ true\ if\ catering\ is\ required\r\n\ @param\ specialReq\ The\ special\ requirements\r\n\ @param\ hallID\ A\ hall\ id\r\n\ @return\ The\ return\ value\r\n
comment42.params=hallID
comment42.target=java.lang.String\ getHallReviews(int)
comment42.text=\r\n\ Method\ getHallReviews\r\n\ This\ method\ returns\ all\ the\ formatted\ reviews\ for\ a\ hall\r\n\ @param\ hallID\ A\ hall\ id\r\n\ @return\ The\ formmated\ reviews\ for\ the\ hall\r\n
comment43.params=customerID
comment43.target=java.lang.String\ getQuotationResponse(int)
comment43.text=\r\n\ Method\ getQuotationResponse\r\n\ This\ method\ returns\ all\ the\ formatted\ quotation\ responses\ relating\ to\ a\ customer\r\n\ @param\ customerID\ A\ customer\ id\r\n\ @return\ The\ formatted\ quotation\ responses\r\n
comment44.params=userID\ quotationID
comment44.target=java.lang.String\ getQuotationDetails(int,\ int)
comment44.text=\r\n\ Method\ getQuotationDetails\r\n\ This\ method\ returns\ the\ formatted\ quotation\ details\ for\ a\ user\ and\ quotation\r\n\ @param\ userID\ A\ user\ id\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @return\ The\ formatted\ quotation\ details\r\n
comment45.params=quotationID
comment45.target=boolean\ isQuotationAccepted(int)
comment45.text=\r\n\ Method\ isQuotationAccepted\r\n\ This\ method\ checks\ if\ a\ quotation\ has\ been\ accepted\ by\ the\ owner\ or\ not\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @return\ true\ if\ quotation\ has\ been\ accepted,\ false\ if\ not\r\n
comment46.params=customerId\ quotationId
comment46.target=boolean\ isBookingDepositPaid(int,\ int)
comment46.text=\r\n\ Method\ isBookingDepositPaid\r\n\ This\ method\ checks\ if\ the\ deposit\ related\ to\ a\ booking\ has\ been\ paid\r\n\ @param\ customerId\ A\ customer\ id\r\n\ @param\ quotationId\ A\ quotation\ id\r\n\ @return\ true\ if\ deposit\ has\ been\ paid,\ false\ if\ not\r\n
comment47.params=customerId\ quotationId\ paymentType
comment47.target=void\ makeBooking(int,\ int,\ java.lang.String)
comment47.text=\r\n\ Method\ makeBooking\r\n\ This\ method\ is\ used\ to\ make\ a\ booking\ related\ a\ quotation.\ It\ also\ writes\ the\ details\ to\ the\ file\r\n\ @param\ customerId\ A\ customer\ id\r\n\ @param\ quotationId\ A\ quotation\ id\r\n\ @param\ paymentType\ A\ payment\ type\r\n
comment48.params=userID\ quotationID
comment48.target=java.lang.String\ getReceipt(int,\ int)
comment48.text=\r\n\ Method\ getReceipt\r\n\ This\ method\ returns\ the\ formatted\ receipt\ for\ a\ booking\r\n\ @param\ userID\ A\ user\ id\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @return\ The\ formatted\ receipt\ \r\n
comment49.params=ownerID
comment49.target=java.lang.String\ getQuotationRequests(int)
comment49.text=\r\n\ Method\ getQuotationRequests\r\n\ This\ method\ returns\ the\ formatted\ quotation\ requests\ for\ an\ owner's\ halls\r\n\ @param\ ownerID\ An\ owner\ id\r\n\ @return\ The\ formatted\ quotation\ requests\r\n
comment5.params=newPayments
comment5.target=void\ setPayments(java.util.ArrayList)
comment5.text=\r\n\ Method\ setPayments\r\n\ mutator\ method\ for\ the\ arraylist\ of\ payments\r\n\ @param\ newPayments\ A\ list\ of\ payments\r\n
comment50.params=userID\ quotationID\ status
comment50.target=void\ updateQuotationStatus(int,\ int,\ java.lang.String)
comment50.text=\r\n\ Method\ updateQuotationStatus\r\n\ This\ method\ is\ used\ to\ update\ a\ quotation's\ status\r\n\ @param\ userID\ A\ user\ id\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @param\ status\ the\ new\ status\r\n
comment51.params=
comment51.target=java.lang.String\ getPaymentsForOwner()
comment51.text=\r\n\ Method\ getPaymentsForOwner\r\n\ This\ method\ returns\ all\ the\ formatted\ payments\ for\ the\ owner\r\n\ @return\ The\ return\ value\r\n
comment52.params=quotationID
comment52.target=java.lang.String\ getPaymentDetails(int)
comment52.text=\r\n\ Method\ getPaymentDetails\r\n\ This\ method\ returns\ the\ formatted\ payment\ details\ for\ a\ particular\ payment\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @return\ The\ formatted\ payment\ details\r\n
comment53.params=quotationID\ status
comment53.target=void\ updatePaymentnStatus(int,\ java.lang.String)
comment53.text=\r\n\ Method\ updatePaymentnStatus\r\n\ This\ method\ is\ used\ to\ update\ a\ booking's\ payment\ status\r\n\ @param\ quotationID\ A\ quotation\ id\r\n\ @param\ status\ the\ new\ status\r\n
comment54.params=
comment54.target=java.lang.String\ getAllUsers()
comment54.text=\r\n\ Method\ getAllUsers\r\n\ This\ method\ returns\ the\ formatted\ details\ of\ all\ the\ users\ except\ administrator\r\n\ @return\ The\ formatted\ user\ details\r\n
comment55.params=email
comment55.target=boolean\ isEmailUsed(java.lang.String)
comment55.text=\r\n\ Method\ isEmailUsed\r\n\ Checks\ if\ email\ has\ already\ been\ used\r\n\ @param\ email\ A\ email\r\n\ @return\ true\ if\ already\ used\r\n
comment6.params=newUsers
comment6.target=void\ setUsers(java.util.ArrayList)
comment6.text=\r\n\ Method\ setUsers\r\n\ mutator\ method\ for\ the\ arraylist\ of\ users\r\n\ @param\ newUsers\ A\ list\ of\ users\r\n
comment7.params=newHalls
comment7.target=void\ setHalls(java.util.ArrayList)
comment7.text=\r\n\ Method\ setHalls\r\n\ mutator\ method\ for\ the\ arraylist\ of\ halls\r\n\ @param\ newHalls\ A\ list\ of\ halls\r\n
comment8.params=userId
comment8.target=boolean\ isUserLocked(int)
comment8.text=\r\n\ Method\ isUserLocked\r\n\ This\ method\ checks\ if\ a\ user\ is\ locked\ out\ or\ not\r\n\ @param\ userId\ A\ user's\ id\r\n\ @return\ true\ if\ the\ user\ is\ locked\ out\ else\ false\r\n
comment9.params=userId\ status
comment9.target=void\ updateUserLockStatus(int,\ boolean)
comment9.text=\r\n\ Method\ updateUserLockStatus\r\n\ This\ method\ is\ used\ to\ update\ a\ user's\ locked\ out\ status\r\n\ @param\ userId\ A\ user's\ id\r\n\ @param\ status\ the\ new\ status\r\n
numComments=56
